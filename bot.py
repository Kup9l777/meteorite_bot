import os
import asyncio
import logging
from datetime import datetime, timedelta

import aiohttp
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message

# -------------------- –õ–û–ì–ò --------------------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("meteorite")

# -------------------- ENV --------------------
TG_TOKEN = os.getenv("TG_TOKEN", "")
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()]
OZON_CLIENT_ID = os.getenv("OZON_CLIENT_ID", "")
OZON_API_KEY = os.getenv("OZON_API_KEY", "")

# heartbeat-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
HEARTBEAT_MINUTES = int(os.getenv("HEARTBEAT_MINUTES", "10"))
HEARTBEAT_CHAT_ID = int(os.getenv("HEARTBEAT_CHAT_ID", ADMIN_IDS[0] if ADMIN_IDS else "0"))

# -------------------- BOT/DP --------------------
bot = Bot(token=TG_TOKEN, default_parse_mode=ParseMode.HTML)
dp = Dispatcher()

# -------------------- –°–æ—Å—Ç–æ—è–Ω–∏–µ --------------------
# –ø–æ—Å–ª–µ–¥–Ω—è—è ¬´–∂–∏–≤–∞—è¬ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ / —É—Å–ø–µ—à–Ω—ã–π —Ç–∏–∫ —Ü–∏–∫–ª–∞ / —É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Ozon)
last_activity: datetime = datetime.now()

# –∫—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
previous_prices: dict[str, int] = {}

# –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –£–î–ê–ß–ù–û–ì–û —Ç–∏–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏ (–¥–ª—è /health)
last_cycle_at: datetime | None = None

# -------------------- –£—Ç–∏–ª–∏—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ --------------------
def touch_alive(note: str = "") -> None:
    """
    –û–±–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ ¬´–±–æ—Ç –∂–∏–≤¬ª.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è:
      - –ø—Ä–∏ –ª—é–±–æ–º –≤—Ö–æ–¥—è—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      - –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –∫ Ozon API
      - –≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–∏–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏
    """
    global last_activity
    last_activity = datetime.now()
    if note:
        log.debug("heartbeat touch: %s", note)

# -------------------- Ozon API --------------------
async def get_ozon_products(limit: int = 100) -> list[dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (items) —Å offer_id/product_id –∏–∑ Ozon.
    –ù–∞ –£–°–ü–ï–• ‚Äî touch_alive().
    """
    url = "https://api-seller.ozon.ru/v3/product/list"
    headers = {
        "Client-Id": OZON_CLIENT_ID,
        "Api-Key": OZON_API_KEY,
        "Content-Type": "application/json",
    }
    payload = {
        "filter": {"visibility": "ALL"},
        "limit": limit,
        "offset": 0,
    }

    all_items: list[dict] = []
    async with aiohttp.ClientSession() as session:
        while True:
            async with session.post(url, headers=headers, json=payload) as resp:
                text = await resp.text()
                if resp.status != 200:
                    log.error("Failed to fetch products: status=%s, text=%s", resp.status, text)
                    return []  # –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º heartbeat –Ω–∞ –Ω–µ—É—Å–ø–µ—Ö

                data = await resp.json()
                items = data.get("result", {}).get("items", [])
                all_items.extend(items)

                # —É—Å–ø–µ—Ö –∑–∞–ø—Ä–æ—Å–∞ -> —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                touch_alive("ozon_products")

                if not items:
                    break
                if len(items) < limit:
                    break

                payload["offset"] += len(items)

    return all_items


async def get_ozon_prices(offer_ids: list[str], product_ids: list[int]) -> dict | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å —Ü–µ–Ω–∞–º–∏ –ø–æ offer_id/product_id.
    –ù–∞ –£–°–ü–ï–• ‚Äî touch_alive().
    """
    url = "https://api-seller.ozon.ru/v5/product/info/prices"
    headers = {
        "Client-Id": OZON_CLIENT_ID,
        "Api-Key": OZON_API_KEY,
        "Content-Type": "application/json",
    }
    payload = {
        "with_discount": True,
        "filter": {
            "offer_id": offer_ids,
            "product_id": product_ids,
            "visibility": "ALL",
        },
        "limit": 100,
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=payload) as resp:
            text = await resp.text()
            if resp.status != 200:
                log.error("Failed to fetch prices: status=%s, text=%s", resp.status, text)
                return None

            # —É—Å–ø–µ—Ö –∑–∞–ø—Ä–æ—Å–∞ -> —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            touch_alive("ozon_prices")
            return await resp.json()

# -------------------- –ö–æ–º–∞–Ω–¥—ã --------------------
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer(
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç.\n"
    "–ò—Å–ø–æ–ª—å–∑—É–π /prices –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω.\n"
    "–ù–∞–±–µ—Ä–∏: /health –∏ —É–≤–∏–¥–∏—à—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞,\n"
    "–∞ —Ç–∞–∫–∂–µ –∫–æ–≥–¥–∞ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω.")
    touch_alive("cmd_start")

@dp.message(Command("prices"))
async def prices_cmd(message: Message):
    products = await get_ozon_products()
    if not products:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å Ozon.")
        return

    offer_ids = [it.get("offer_id") for it in products if it.get("offer_id")]
    product_ids = [it.get("product_id") for it in products if it.get("product_id")]

    prices = await get_ozon_prices(offer_ids, product_ids)
    if not prices:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω –∫ Ozon API.")
        return

    # –∫–æ—Ä–æ—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ (–ø–µ—Ä–≤—ã–µ N)
    lines = []
    for it in prices.get("items", [])[:10]:
        offer = it.get("offer_id")
        product = it.get("product_id")
        marketing_price = it.get("marketing_price") or 0
        # price –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ–º, —Ç–∞–∫ –∏ –æ–±—ä–µ–∫—Ç–æ–º {price: "..."}
        if isinstance(it.get("price"), (int, float)):
            regular_price = it.get("price") or 0
        else:
            regular_price = (it.get("price") or {}).get("price", 0)
        price = marketing_price if marketing_price > 0 else regular_price

        old_p = it.get("old_price") or 0
        discount = old_p - (price or 0)
        suffix = f" (—Å–∫–∏–¥–∫–∞ {discount} —Ä—É–±.)" if discount and discount > 0 else ""
        lines.append(f"‚Ä¢ {offer} (Product ID: {product}): –¶–µ–Ω–∞ {price} —Ä—É–±.{suffix}")

    await message.answer("\n".join(lines) if lines else "–¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    touch_alive("cmd_prices")

# ‚úÖ –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@dp.message(Command(commands=["health", "ping", "monitor"]))
async def health_cmd(message: Message):
    now = datetime.now()
    silence_td = now - last_activity
    silence_min = silence_td.total_seconds() // 60
    threshold = timedelta(minutes=HEARTBEAT_MINUTES)

    # —Å—Ç–∞—Ç—É—Å –ø–æ ¬´—Ç–∏—à–∏–Ω–µ¬ª
    if silence_td <= threshold:
        hb_status = "OK"
    elif silence_td <= threshold + timedelta(minutes=HEARTBEAT_MINUTES):
        hb_status = "WARN"
    else:
        hb_status = "SILENT"

    # —Å—Ç–∞—Ç—É—Å –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Çiku —Ü–∏–∫–ª–∞
    cycle_status = "‚Äî"
    last_cycle_txt = "–Ω–∏–∫–æ–≥–¥–∞"
    if last_cycle_at:
        since_cycle = now - last_cycle_at
        last_cycle_txt = f"{int(since_cycle.total_seconds() // 60)} –º–∏–Ω –Ω–∞–∑–∞–¥"
        cycle_status = "OK" if since_cycle <= timedelta(minutes=15) else "STALE"

    text = (
        f"ü©∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞\n"
        f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞: {hb_status} (—Ç–∏—à–∏–Ω–∞ {int(silence_min)} –º–∏–Ω, –ø–æ—Ä–æ–≥ {HEARTBEAT_MINUTES})\n"
        f"‚Ä¢ –û—Ç–∫–ª–∏–∫ –æ—Ç Ozon: {cycle_status} ({last_cycle_txt})\n"
        f"‚Ä¢ –ê–¥–º–∏–Ω—ã_–±–æ—Ç–∞: {', '.join(map(str, ADMIN_IDS)) or '‚Äî'}"
    )
    await message.answer(text)
    touch_alive("cmd_health")

# -------------------- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω --------------------
async def check_prices_periodically():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.
    –ü–æ —É—Å–ø–µ—à–Ω–æ–º—É –¢–ò–ö–£ ‚Äî touch_alive().
    """
    global previous_prices, last_cycle_at
    while True:
        try:
            products = await get_ozon_products()
            if not products:
                # –Ω–∞ –Ω–µ—É—Å–ø–µ—Ö –Ω–µ —Ç—Ä–æ–≥–∞–µ–º heartbeat ‚Äî –ø—É—Å—Ç—å —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–ª–µ—Ä—Ç —Ç–∏—à–∏–Ω—ã
                await asyncio.sleep(60)
                continue

            offer_ids = [it.get("offer_id") for it in products if it.get("offer_id")]
            product_ids = [it.get("product_id") for it in products if it.get("product_id")]

            prices = await get_ozon_prices(offer_ids, product_ids)
            if not prices:
                await asyncio.sleep(60)
                continue

            # —Ä–∞–∑–±–æ—Ä —Ü–µ–Ω –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            for it in prices.get("items", []):
                offer = it.get("offer_id")

                marketing_price = it.get("marketing_price") or 0
                if isinstance(it.get("price"), (int, float)):
                    regular_price = it.get("price") or 0
                else:
                    regular_price = (it.get("price") or {}).get("price", 0)
                price = marketing_price if marketing_price > 0 else regular_price

                old_price = previous_prices.get(offer)
                if old_price is not None and old_price != price:
                    text = f"–¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –¥–ª—è <b>{offer}</b>: {old_price} ‚Üí {price} —Ä—É–±."
                    for admin in ADMIN_IDS:
                        try:
                            await bot.send_message(admin, text)
                        except Exception as e:
                            log.warning("send to admin %s failed: %s", admin, e)

                previous_prices[offer] = price

            # —É—Å–ø–µ—à–Ω—ã–π —Ç–∏–∫ —Ü–∏–∫–ª–∞ ‚Äî –∂–∏–≤
            last_cycle_at = datetime.now()
            touch_alive("cycle_tick")

        except Exception as e:
            log.exception("periodic error: %s", e)

        # –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

# -------------------- Heartbeat-–º–æ–Ω–∏—Ç–æ—Ä --------------------
async def heartbeat_watcher():
    """
    –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å–æ–æ–±—â–µ–Ω–∏—è/—É—Å–ø–µ—à–Ω—ã–µ —Ç–∏–∫–∏/—É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã) –¥–æ–ª—å—à–µ HEARTBEAT_MINUTES ‚Äî —à–ª—ë–º –∞–ª–µ—Ä—Ç.
    –ü–æ—Å–ª–µ –∞–ª–µ—Ä—Ç–∞ –¥–µ–ª–∞–µ–º touch_alive, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.
    """
    global last_activity
    threshold = timedelta(minutes=HEARTBEAT_MINUTES)

    if not HEARTBEAT_CHAT_ID:
        log.warning("HEARTBEAT_CHAT_ID not set ‚Äî heartbeat –±—É–¥–µ—Ç —Ç–∏—Ö–∏–º.")
        return

    while True:
        try:
            silence = datetime.now() - last_activity
            if silence > threshold:
                try:
                    await bot.send_message(
                        HEARTBEAT_CHAT_ID,
                        (
                            f"‚ö†Ô∏è <b>–¢–∏—à–∏–Ω–∞</b>: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ "
                            f"{int(silence.total_seconds() // 60)} –º–∏–Ω (–ø–æ—Ä–æ–≥ {HEARTBEAT_MINUTES})."
                        ),
                    )
                except Exception as e:
                    log.warning("send heartbeat alert failed: %s", e)

                # —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, ¬´–æ–±–Ω—É–ª–∏–º¬ª —Å—á—ë—Ç—á–∏–∫
                touch_alive("heartbeat_alert")
        except Exception as e:
            log.error("heartbeat watcher error: %s", e)

        await asyncio.sleep(60)

# -------------------- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –ö–ê–ñ–î–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ --------------------
@dp.message()  # –ª–æ–≤–∏–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
async def any_message(msg: Message):
    touch_alive("incoming_msg")
    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–± –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç

# -------------------- ENTRYPOINT --------------------
async def main():
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(check_prices_periodically())
    asyncio.create_task(heartbeat_watcher())

    # –∏ —Å–∞–º –±–æ—Ç
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
